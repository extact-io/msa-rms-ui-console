<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>io.extact</groupId>
		<artifactId>msa-rms-parent</artifactId>
		<version>0.0.1-SNAPSHOT</version>
		<relativePath>../msa-rms-parent/pom.xml</relativePath>
	</parent>
	<artifactId>msa-rms-ui-console</artifactId>
	<packaging>jar</packaging>

	<name>msa-rms-ui-console</name>
	<description>Console UI to operate the rms application</description>

	<properties>
		<mainClass>io.extact.msa.rms.console.ConsoleMain</mainClass>
		<target.env>develop</target.env>
	</properties>

	<dependencies>
		<!-- ======================================== -->
		<!-- *** rms module dependencies ***              -->
		<!-- ======================================== -->
		<dependency>
			<groupId>io.extact</groupId>
			<artifactId>msa-rms-test-lib</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.extact</groupId>
			<artifactId>msa-rms-platform-core</artifactId>
		</dependency>
		<dependency>
			<groupId>io.extact</groupId>
			<artifactId>msa-rms-platform-fw</artifactId>
		</dependency>
		<dependency>
			<groupId>io.extact</groupId>
			<artifactId>msa-rms-platform-fw-test-lib</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- ======================================== -->
		<!-- *** provided scope dependencies ***      -->
		<!-- ======================================== -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- ======================================== -->
		<!-- *** compile scope dependencies ***       -->
		<!-- ======================================== -->
		<!-- dependent JakartaEE APIs -->
		<dependency>
			<groupId>jakarta.enterprise</groupId>
			<artifactId>jakarta.enterprise.cdi-api</artifactId>
		</dependency>
		<dependency>
			<groupId>jakarta.ws.rs</groupId>
			<artifactId>jakarta.ws.rs-api</artifactId>
		</dependency>
		<!-- dependent MicroProfile APIs -->
		<dependency>
			<groupId>org.eclipse.microprofile.config</groupId>
			<artifactId>microprofile-config-api</artifactId>
		</dependency>
		<dependency>
			<groupId>org.eclipse.microprofile.rest.client</groupId>
			<artifactId>microprofile-rest-client-api</artifactId>
		</dependency>
		<dependency>
			<groupId>io.helidon.microprofile.cdi</groupId>
			<artifactId>helidon-microprofile-cdi</artifactId>
			<scope>compile</scope> <!-- for ConsoleMain -->
		</dependency>
		<!-- dependent Console framework -->
		<dependency>
			<groupId>org.beryx</groupId>
			<artifactId>text-io</artifactId>
		</dependency>

		<!-- ======================================== -->
		<!-- *** runtime scope dependencies ***       -->
		<!-- ======================================== -->
		<dependency>
			<groupId>io.helidon.microprofile.config</groupId>
			<artifactId>helidon-microprofile-config</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>io.helidon.microprofile.rest-client</groupId>
			<artifactId>helidon-microprofile-rest-client</artifactId>
			<scope>runtime</scope>
		</dependency>
		<!-- for binding to application/json. It won't work without this -->
		<dependency>
			<groupId>org.glassfish.jersey.media</groupId>
			<artifactId>jersey-media-json-binding</artifactId>
			<scope>runtime</scope>
		</dependency>
		<!--
		To use helidon-rest-client alone without ServerExtension,
		the following dependencies are required in runtime
		-->
		<dependency>
			<groupId>org.glassfish.jersey.ext.cdi</groupId>
			<artifactId>jersey-weld2-se</artifactId>
			<scope>runtime</scope>
		</dependency>

		<!-- ======================================== -->
		<!-- *** test scope dependencies ***          -->
		<!-- ======================================== -->
		<!-- for use JAX-RS Server in test -->
		<dependency>
			<groupId>jakarta.security.enterprise</groupId>
			<artifactId>jakarta.security.enterprise-api</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.eclipse.microprofile.jwt</groupId>
			<artifactId>microprofile-jwt-auth-api</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.bitbucket.b_c</groupId>
			<artifactId>jose4j</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.helidon.microprofile.server</groupId>
			<artifactId>helidon-microprofile-server</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.hibernate.validator</groupId>
			<artifactId>hibernate-validator</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.glassfish.jersey.ext</groupId>
			<artifactId>jersey-bean-validation</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.glassfish</groupId>
			<artifactId>jakarta.el</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
			</resource>
			<resource>
				<directory>env/profile/${target.env}</directory>
			</resource>
		</resources>
	</build>

	<profiles>
		<profile>
			<id>product</id>
			<properties>
				<target.env>product</target.env>
			</properties>
		</profile>
		<profile>
			<id>docker</id>
			<properties>
				<mvn.profile.docker>on</mvn.profile.docker>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>io.fabric8</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<configuration>
							<images>
								<image>
									<alias>msa-application</alias>
									<name>msa-application</name>
									<run>
										<env>
											<JWT_FILTER_ENABLE>true</JWT_FILTER_ENABLE>
											<SERVICE_URL_ITEM>http://msa-service-item:7002</SERVICE_URL_ITEM>
											<SERVICE_URL_RESERVATION>http://msa-service-reservation:7003</SERVICE_URL_RESERVATION>
											<SERVICE_URL_USER>http://msa-service-user:7004</SERVICE_URL_USER>
										</env>
										<namingStrategy>alias</namingStrategy>
										<ports>7001:7001</ports>
										<links>
											<link>msa-service-item</link>
											<link>msa-service-reservation</link>
											<link>msa-service-user</link>
										</links>
										<wait>
											<http>
												<url>http://localhost:7001/health/ready</url>
												<method>GET</method>
												<status>200..399</status>
											</http>
											<time>60000</time>
										</wait>
									</run>
								</image>
								<image>
									<alias>msa-service-item</alias>
									<name>msa-service-item</name>
									<run>
										<namingStrategy>alias</namingStrategy>
									</run>
								</image>
								<image>
									<alias>msa-service-reservation</alias>
									<name>msa-service-reservation</name>
									<run>
										<env>
											<SERVICE_URL_ITEM>http://msa-service-item:7002</SERVICE_URL_ITEM>
											<SERVICE_URL_USER>http://msa-service-user:7004</SERVICE_URL_USER>
										</env>
										<namingStrategy>alias</namingStrategy>
										<links>
											<link>msa-service-item</link>
											<link>msa-service-user</link>
										</links>
									</run>
								</image>
								<image>
									<alias>msa-service-user</alias>
									<name>msa-service-user</name>
									<run>
										<namingStrategy>alias</namingStrategy>
									</run>
								</image>
							</images>
							<keepContainer>false</keepContainer>
						</configuration>
						<executions>
							<execution>
								<id>start</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>start</goal>
								</goals>
							</execution>
							<execution>
								<id>stop</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>stop</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<version>${version.plugin.maven-failsafe}</version>
						<!-- for force JUnit5 -->
						<dependencies>
							<dependency>
								<groupId>org.apache.maven.surefire</groupId>
								<artifactId>surefire-junit-platform</artifactId>
								<version>${version.plugin.maven-failsafe}</version>
							</dependency>
						</dependencies>
						<configuration>
							<systemPropertyVariables>
								<mvn.docker.profile>on</mvn.docker.profile>
							</systemPropertyVariables>
						</configuration>
						<executions>
							<execution>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

</project>
